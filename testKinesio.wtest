import pacientes.*
import aparatos.*


describe "Test parte 1" {
  //PACIENTES
  const leonardo = new Paciente(edad = 40, nivelDolor = 10, nivelFortaleza = 20)
  const milena = new Paciente(edad = 3, nivelDolor = 30, nivelFortaleza = 50)
  //APARATOS
  const magneto1 = new Magneto()
  const bicicleta1 = new Bicicleta()
  const minitramp = new Minitramp()
  test "Leonardo puede usar los tres aparatos creados, mientras que Milena puede usar sólo el magneto." {
    assert.that(leonardo.puedeUsar(magneto1))
    assert.that(leonardo.puedeUsar(bicicleta1))
    assert.that(leonardo.puedeUsar(minitramp))
    assert.that(milena.puedeUsar(magneto1))
    assert.notThat(milena.puedeUsar(bicicleta1))
    assert.notThat(milena.puedeUsar(minitramp))
  }
  test "Después de usar el magneto una vez, el nivel de dolor de Leonardo baja a 9" {
    leonardo.usar(magneto1)
    assert.equals(9,leonardo.nivelDolor())
  }
  test "Después de usar el magneto una vez, el nivel de dolor de Milena baja a 27." {
    milena.usar(magneto1)
    assert.equals(27,milena.nivelDolor())
  }
  test "Después de usar la bicicleta una vez, el nivel de dolor de Leonardo baja a 6, y la fortaleza sube a 23." {
    leonardo.usar(bicicleta1)
    assert.equals(6,leonardo.nivelDolor())
    assert.equals(23,leonardo.nivelFortaleza())
  }
  test "Después de usar el minitramp una vez, la fortaleza de Leonardo sube a 24." {
    leonardo.usar(minitramp)
    assert.equals(24,leonardo.nivelFortaleza())
  }
  test "Leonardo puede hacer la rutina que tiene asignada." {
    assert.that(leonardo.puedeHacerLaRutina())
  }
}
describe "Test parte 2" {
  //PACIENTES
  const leonardo = new Paciente(edad = 40, nivelDolor = 10, nivelFortaleza = 20)
  const milena = new Paciente(edad = 3, nivelDolor = 30, nivelFortaleza = 50)
  //APARATOS
  const magneto1 = new Magneto()
  const bicicleta1 = new Bicicleta()
  const minitramp = new Minitramp()
  
  method initialize() {
    leonardo.asignarRutina([bicicleta1,minitramp,bicicleta1,magneto1])
    milena.asignarRutina([magneto1,bicicleta1])
  }
  test "Cuando leonardo hace su rutina, su nivel de dolor baja a 1.8, y su fortaleza sube a 30." {
    leonardo.hacerRutina()
    assert.equals(1.8,leonardo.nivelDolor())
    assert.equals(30,leonardo.nivelFortaleza())
  }
  test "Milena no puede hacer la rutina que tiene asignada." {
    assert.notThat(milena.puedeHacerLaRutina())
  }
}
describe "Test parte 3" {
  //PACIENTES
  const nicolas = new Resistente(edad = 40, nivelDolor = 10, nivelFortaleza = 20)
  const victoria = new Caprichoso(edad = 30, nivelDolor = 10, nivelFortaleza = 40)
  const julian = new Caprichoso(edad = 20, nivelDolor = 54, nivelFortaleza = 50)
  const zoe = new RapidaRecuperacion(edad = 50, nivelDolor = 14, nivelFortaleza = 40)
  //APARATOS
  const magneto1 = new Magneto()
  const bicicleta1 = new Bicicleta()
  const minitramp = new Minitramp()
  const magnetoVerde = new Magneto(color = "verde")
  const bicicletaRoja = new Bicicleta(color = "rojo")
  
  method initialize() {
    nicolas.asignarRutina([bicicleta1,minitramp,bicicleta1,magneto1])
    victoria.asignarRutina([bicicleta1,minitramp,bicicleta1,magneto1])
    julian.asignarRutina([bicicletaRoja,magnetoVerde,bicicleta1])
    zoe.asignarRutina([bicicleta1,minitramp,bicicleta1,magneto1])
  }
  test "Nicolás puede hacer la rutina que tiene asignada. Después de hacerla una vez, su nivel de dolor baja a 1.8, y su fortaleza sube a 34." {
    assert.that(nicolas.puedeHacerLaRutina())
    
    nicolas.hacerRutina()
    
    assert.equals(1.8,nicolas.nivelDolor())
    assert.equals(34,nicolas.nivelFortaleza())
  }
  test "Victoria no puede hacer la rutina que tiene asignada." {
    assert.notThat(victoria.puedeHacerLaRutina())
  }
  test "Julián puede hacer la rutina que tiene asignada." {
    assert.that(julian.puedeHacerLaRutina())

    julian.hacerRutina()

    assert.equals(29.3,julian.nivelDolor())
    assert.equals(62,julian.nivelFortaleza())
  }
  test "Zoe puede hacer la rutina que tiene asignada. Después de asignar a 2 el valor de decremento de dolor para pacientes de rápida recuperación, y de que Zoe haga su rutinauna vez, su nivel de dolor baja a 3.4, y su fortaleza sube a 51." {
    assert.that(zoe.puedeHacerLaRutina())
    
    valorDecremento.cantidadConfigurable(2)
    zoe.hacerRutina()
    
    assert.equals(3.4,zoe.nivelDolor())
    assert.equals(51,zoe.nivelFortaleza())
  }
}